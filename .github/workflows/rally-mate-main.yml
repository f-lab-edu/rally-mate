name: rally-mate CI with Gradle

on:
  push:
    branches: [ master ]
  #   pull_request:
  #     branches: [ master ]


# Actions 탭에서 수동 실행 가능
#   workflow_dispatch:
#     inputs:
#       region:
#         required: true
#         type: string
#       env:
#         required: true
#         type: string

env:
  PROJECT: rally-mate


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # branch checkout
      - uses: actions/checkout@v3

      # Cache workflow 실행 시간 개선 위해 dependencies와 build output을 캐싱
      # https://www.daleseo.com/github-actions-cache/
      - name: Caching Gradle
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
             ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
        shell: bash

      - name: Test with Gradle
        run: ./gradlew test

      - name: Build with Gradle
        run: ./gradlew build -x test
        shell: bash

      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKERHUB_USER}}
          password: ${{secrets.DOCKERHUB_ACCESS_TOKEN}}

      # jib 이용하여 애플리케이션 도커 허브로 push (docker build -> push까지 한 번에)
      - name: Run Jib to deploy Application
        run: ./gradlew jib

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Application Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_SSH_HOST }}
          username: ${{ secrets.SERVER_SSH_USERNAME }}
          password: ${{ secrets.SERVER_SSH_PASSWORD }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          envs: env.PROJECT
          script: |
            whoami > whoami.txt
            echo $(whoami) > whoami2.txt
            cd ~/${{ env.PROJECT }}
            git pull
            cd docker
            echo '${{ secrets.DOCKERHUB_PASSWORD }}' | docker login -u ${{ secrets.DOCKERHUB_USER }} --password-stdin
            sudo docker rm -f $(docker ps -q -a)
            docker-compose pull
            docker-compose up -d
            docker image prune -f
            

